name: Main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  # Change this to invalidate existing cache.
  CACHE_PREFIX: v0
  PYTHON_PATH: ./

jobs:
  checks:
    name: Python ${{ matrix.python }} - ${{ matrix.task.name }}
    runs-on: [ubuntu-latest]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # python: ['3.8', '3.9', '3.10']
        include:
          - python: '3.10'
            task:
              name: Lint
              run: flake8 .

          - python: '3.10'
            task:
              name: Type check
              run: mypy ./causal_networkx

          - python: '3.10'
            task:
              name: Build
              run: |
                python setup.py check
                python setup.py bdist_wheel sdist

          - python: '3.10'
            task:
              name: Style
              run: make check

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      - name: Install prerequisites
        run: |
          pip install --upgrade pip setuptools wheel virtualenv

      - name: Set build variables
        shell: bash
        run: |
          # Get the exact Python version to use in the cache key.
          echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV
          echo "RUNNER_ARCH=$(uname -m)" >> $GITHUB_ENV
          # Use week number in cache key so we can refresh the cache weekly.
          echo "WEEK_NUMBER=$(date +%V)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        id: virtualenv-cache
        with:
          path: .venv
          key: ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ env.WEEK_NUMBER }}-${{ runner.os }}-${{ env.RUNNER_ARCH }}-${{ env.PYTHON_VERSION }}-

      - name: Setup virtual environment (no cache hit)
        if: steps.virtualenv-cache.outputs.cache-hit != 'true'
        run: |
          test -d .venv || virtualenv -p $(which python) --copies --reset-app-data .venv
          . .venv/bin/activate
          pip install -e .[dev]

      - name: Install editable (cache hit)
        if: steps.virtualenv-cache.outputs.cache-hit == 'true'
        run: |
          . .venv/bin/activate
          pip install --no-deps -e .[dev]

      - name: Show environment info
        run: |
          . .venv/bin/activate
          which python
          python --version
          pip freeze

      - name: ${{ matrix.task.name }}
        run: |
          . .venv/bin/activate
          ${{ matrix.task.run }}

      - name: Upload package distribution files
        if: matrix.task.name == 'Build'
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: dist

      - name: Clean up
        if: always()
        run: |
          . .venv/bin/activate
          pip uninstall -y causal-networkx

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [checks, unit-test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install requirements
        run: |
          pip install --upgrade pip setuptools wheel twine

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v3
        with:
          name: package
          path: dist

      - name: Generate release notes
        run: |
          python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Publish package to PyPI
        run: |
          twine upload -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/*

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
          files: |
            dist/*

  unit-test:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.10'
            networkx-version: networkx-main
          - os: ubuntu-latest
            python-version: 3.9
            networkx-version: networkx-main
          - os: ubuntu-latest
            python-version: 3.8
            networkx-version: networkx-main
          - os: macos-latest
            python-version: 3.9
            networkx-version: networkx-main

    env:
      TZ: Europe/Berlin
      FORCE_COLOR: true
      DISPLAY: ':99.0'
      MNE_LOGGING_LEVEL: 'info'
      OPENBLAS_NUM_THREADS: '1'
      PYTHONUNBUFFERED: '1'

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v2
      
      - name: Install dependencies
        run: |
          pip install --upgrade --upgrade-strategy eager -r requirements.txt
          pip install --upgrade --upgrade-strategy eager -r dev-requirements.txt
          pip install --upgrade --upgrade-strategy eager -r extra-requirements.txt

      - name: Install Networkx (stable)
        if: "matrix.networkx-version == 'networkx-stable'"
        run: |
          git clone --depth 1 https://github.com/networkx/networkx.git@networkx-2.7.1
          pip install -e ./networkx

      - name: Install Networkx (main)
        if: "matrix.networkx-version == 'networkx-main'"
        run: |
          git clone --depth 1 https://github.com/networkx/networkx.git -b main
          pip install -e ./networkx

      - name: Display versions and environment information
        run: |
          echo $TZ
          date
          python --version
          which python

      - name: Install causal-networkx
        run: |
          pip install --no-deps .

      - name: Run pytest unit tests
        run: |
          python -m pytest . --cov=causal_networkx --cov-report=xml --cov-config=pytest.ini --verbose --ignore networkx
        shell: bash

      - name: Upload coverage stats to codecov
        if: "matrix.os == 'ubuntu-latest'"
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          # curl -Os https://uploader.codecov.io/latest/linux/codecov chmod +x codecov ./codecov
